
@functions {
    string errorMessage;

    public static int CalcTotalCost(int width, int length, int drawers, string surfaceMaterial, int rushOrder)
    {
        int priceEstimate = CalcAreaCost(width, length) + CalcDrawerCost(drawers) + CalcMaterialCost(surfaceMaterial) + CalcRushOrderCost(width, length, rushOrder);
        return priceEstimate;
    }

    public static int CalcDrawerCost(int drawers)
    {
        int cost = drawers * 25;
        return cost;
    }
    //determine rush order pricing using size of desk and rush order timing.
    public static int CalcRushOrderCost(int width, int length, int rushOrder)
    {
        int deskArea = getArea(width, length);
        int rushCost = 0;
        int i = 0, j = 0;


        if (rushOrder.Equals(0))
            return 0;
        else
        {
            //use desk area to set i
            if (deskArea <= 1000)
                j = 0;
            else if ((deskArea > 1000) && (deskArea < 2000))
                j = 1;
            else
                j = 2;
            //use rush order timing to set j
            switch (rushOrder)
            {
                case 3:
                    i = 0;
                    break;
                case 5:
                    i = 1;
                    break;
                case 7:
                    i = 2;
                    break;
            }

            //read in rush order pricing file
            int[,] rushOrderPricing = new int[3, 3];
            GetRushOrderInfo(rushOrderPricing);

            //use i and j values to pull up appropriate pricing from 2D array
            rushCost = rushOrderPricing[i, j];

            return rushCost;
        }

    }

    private static int getArea(int width, int length)
    {
        int area = width * length;
        return area;
    }

    //determine material price based on user selection and return price
    public static int CalcMaterialCost(string surfaceMaterial)
    {
        int price = 0;
        switch (surfaceMaterial)
        {
            case "Oak":
                price = 200;
                break;
            case "Laminate":
                price = 100;
                break;
            case "Pine":
                price = 50;
                break;
            case "Marble":
                price = 500;
                break;
            case "Walnut":
                price = 250;
                break;
            case "Metal":
                price = 300;
                break;
            default:
                return 0;
        }
        return price;
    }

    //calculate a price based on desk surface area and return price
    public static int CalcAreaCost(int width, int length)
    {
        int deskArea = getArea(width, length);
        int price = 0;
        if (deskArea > 1000)
        {
            price = 5 * (deskArea - 1000) + 200;
        }
        else
            price = 200;
        return price;
    }

    //read in pricing info file and place it into a 2D array
    private static void GetRushOrderInfo(int[,] array)
    {
        
            var dataFile = Server.MapPath("~/App_Data/rushOrderPrices.txt");
            string[] lines = File.ReadAllLines(dataFile);
            int count = 0;
            for (int i = 0; i < array.GetLength(0); i++)
            {
                for (int j = 0; j < array.GetLength(1); j++)
                {
                    array[i, j] = int.Parse(lines[count]);
                    count++;
                }
            }


        
    }
}
